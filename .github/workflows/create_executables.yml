name: Build and Release Executables

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the version (e.g., v1.0.0)"
        required: true

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        # https://github.com/actions/runner-images
        os: [ubuntu-latest, windows-latest, macos-latest]
        # archs are set based on OS-type (windows & ubuntu are x86; mac is arm)
        # you have to run private runners otherwise.
        # arch: [x64, arm64]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Show runner contexts
        run: |
          echo "runner.os=${{ runner.os }}"
          echo "runner.arch=${{ runner.arch }}"
          echo "matrix.os=${{ matrix.os }}"

      - name: Show Windows CPU info
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-CimInstance Win32_Processor | Select-Object -Property Name,AddressWidth,DataWidth
          Write-Output "PROCESSOR_ARCHITECTURE=$env:PROCESSOR_ARCHITECTURE"
          Write-Output "PROCESSOR_ARCHITEW6432=$env:PROCESSOR_ARCHITEW6432"
      
      - name: Show Linux / macOS CPU info
        if: runner.os != 'Windows'
        shell: bash
        run: |
          uname -a
          uname -m
          arch || true
          if command -v lscpu >/dev/null 2>&1; then lscpu; fi
    
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'         # use latest Python 3 release

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile grep-docx.py

      - name: Prepare artifact filename
        run: |
          mkdir -p builds
          mv dist/grep-docx builds/grep-docx-${{ runner.os }}
        shell: bash

      - name: Upload build artifact for workflow release step
        uses: actions/upload-artifact@v4
        with:
          name: grep-docx-${{  runner.os  }}
          path: builds/*


  store:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Normalize filenames and make executables runnable
        run: |
          # report what files we got
          for f in *; do
            echo "found: $f"
          done
          chmod +x grep-docx-* || true
          chmod -x grep-docx-*.exe || true
        shell: bash

      - name: set up directories for executables branch
        run: |
          mkdir -p   executables/Windows
          cp         grep-docx-Windows.exe     executables/Windows/grep-docx.exe
          mkdir -p   executables/Linux/x86
          cp         grep-docx-Linux           executables/Linux/x86/grep-docx
          mkdir -p   executables/MacOS
          cp         grep-docx-macOS           executables/MacOS/grep-docx
        shell: bash

      # - name: Build macOS universal binary
      #   if: steps.download-artifact.outcome != 'failure'
      #   run: |
      #     set -e
      #     # require both thin slices to exist
      #     if [ -f grep-docx-MacOS-x64 ] && [ -f grep-docx-MacOS-arm64 ]; then
      #       # ensure Mach-O slices are executable and have correct CPUs
      #       chmod +x grep-docx-MacOS-x64 grep-docx-MacOS-arm64
      #       # create universal binary
      #       lipo -create -output grep-docx-MacOS-universal grep-docx-MacOS-x64 grep-docx-MacOS-arm64
      #       chmod +x grep-docx-MacOS-universal
      #       mkdir -p   executables/MacOS/universal
      #       cp         grep-docx-MacOS-universal           executables/MacOS/universal/grep-docx
      #     else
      #       echo "One or both macOS slices missing, skipping lipo; using whichever exists"
      #     fi
      #   shell: bash
        
      - name: Commit artifacts to executables branch
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # fetch remote executables branch if it exists
          git fetch origin executables || true

          if git show-ref --verify --quiet refs/heads/executables; then
            git checkout executables
            git reset --hard origin/executables || true
          else
            git checkout --orphan executables
            git rm -rf . || true
          fi

          # copy all downloaded artifacts into executables/ and commit once
          git add -A executables
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add builds for ${{ github.sha }} (trigger: ${{ github.event.inputs.version }})"
            git push --set-upstream origin artifacts --force-with-lease
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
